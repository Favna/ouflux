name: Continuous Deployment

'on':
  push:
    branches:
      - main
    paths:
      - src/**
      - .github/**
      - README.md

jobs:
  pre_ci:
    name: Prepare CI environment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - name: '[Push] Get commit message'
        if: github.event_name == 'push'
        id: push_get_commit_message
        run: echo ::set-output name=push_commit_message::$(git log --format=%B -n 1 HEAD)
      - name: '[Pull Request] Get commit message'
        if: github.event_name == 'pull_request'
        id: pr_get_commit_message
        run: echo ::set-output name=pr_commit_message::$(git log --format=%B -n 1 HEAD^2)
      - name: Add problem matchers
        run: |
          echo "::add-matcher::.github/problemMatchers/tsc.json"
          echo "::add-matcher::.github/problemMatchers/eslint-stylish.json"
    outputs:
      commit_message: $( [ -z "${{ steps.pr_get_commit_message.outputs.pr_commit_message }}" ] && echo "${{ steps.push_get_commit_message.outputs.push_commit_message }}" || echo "${{ steps.pr_get_commit_message.outputs.pr_commit_message }}" )

  Linting:
    name: Linting
    runs-on: ubuntu-latest
    if: "!contains(needs.pre_ci.outputs.commit_message, '[skip ci]')"
    needs: pre_ci
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
      - name: Use Node.js 14
        uses: actions/setup-node@v2
        with:
          node-version: 14
      - name: Restore CI Cache
        uses: actions/cache@v1
        with:
          path: node_modules
          key: "${{ runner.os }}-14-${{ hashFiles('**/yarn.lock') }}"
      - name: Install Dependencies
        run: yarn --frozen-lockfile
      - name: Run ESLint
        run: yarn lint --fix=false
  Building:
    name: Compile source code
    runs-on: ubuntu-latest
    if: "!contains(needs.pre_ci.outputs.commit_message, '[skip ci]')"
    needs: [pre_ci, Linting]
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
      - name: Use Node.js 14
        uses: actions/setup-node@v2
        with:
          node-version: 14
      - name: Restore CI Cache
        uses: actions/cache@v1
        with:
          path: node_modules
          key: "${{ runner.os }}-14-${{ hashFiles('**/yarn.lock') }}"
      - name: Install Dependencies
        run: yarn --frozen-lockfile
      - name: Copy Configuration
        run: |
          pushd src &&
          cp config.example.ts config.ts &&
          popd
      - name: Build Code
        run: yarn build
      - name: Upload Microservice bundle to artifacts
        uses: actions/upload-artifact@v2
        with:
          name: microservice_bundle
          path: dist/
  Dockerhub:
    name: Publish image to Dockerhub
    runs-on: ubuntu-latest
    if: >-
      !(contains(needs.pre_ci.outputs.commit_message, '[skip ci]')
      ||contains(needs.pre_ci.outputs.commit_message, '[skip docker]'))
    needs: [pre_ci, Building]
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
      - name: Download build bundle artifact
        uses: actions/download-artifact@v2
        with:
          name: microservice_bundle
          path: dist/
      - name: Publish to Dockerhub
        uses: elgohr/Publish-Docker-Github-Action@master
        with:
          name: skyrabot/outflux
          username: '${{ secrets.DOCKER_USERNAME }}'
          password: '${{ secrets.DOCKER_PASSWORD }}'
          tags: 'latest,stable,master'
  Github-Package-Registry-Docker:
    name: Publish image to Github Package Registry
    runs-on: ubuntu-latest
    if: >-
      !(contains(needs.pre_ci.outputs.commit_message, '[skip ci]')
      ||contains(needs.pre_ci.outputs.commit_message, '[skip docker]'))
    needs: [pre_ci, Building]
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
      - name: Download build bundle artifact
        uses: actions/download-artifact@v2
        with:
          name: microservice_bundle
          path: dist/
      - name: Publish to Github Package Registry
        uses: elgohr/Publish-Docker-Github-Action@master
        with:
          name: skyra-project/outflux/outflux
          username: NM-EEA-Y
          password: '${{ secrets.SKYRA_TOKEN }}'
          tags: 'latest,stable,master'
          registry: docker.pkg.github.com
